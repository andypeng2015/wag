// Copyright (c) 2016 Timo Savola. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package x86

import (
	"github.com/tsavola/wag/abi"
	"github.com/tsavola/wag/internal/gen"
	"github.com/tsavola/wag/internal/links"
	"github.com/tsavola/wag/internal/opers"
	"github.com/tsavola/wag/internal/regs"
	"github.com/tsavola/wag/internal/values"
)

func (ISA) ConversionOp(m *Module, code gen.RegCoder, oper uint16, resultType abi.Type, source values.Operand) (result values.Operand) {
	switch oper {
	case opers.Wrap:
		return opWrap(m, code, resultType, source)

	default:
		return commonConversionOp(m, code, oper, resultType, source)
	}
}

func opWrap(m *Module, code gen.RegCoder, resultType abi.Type, source values.Operand) values.Operand {
	source.Type = abi.I32 // short mov; useful zeroExt flag
	reg, zeroExt := opMaybeResultReg(m, code, source, false)
	return values.TempRegOperand(resultType, reg, zeroExt)
}

func commonConversionOp(m *Module, code gen.RegCoder, oper uint16, resultType abi.Type, source values.Operand) values.Operand {
	reg, zeroExt := opMaybeResultReg(m, code, source, false)
	// TODO: for int<->float ops: borrow source reg, allocate target reg

	switch oper {
	case opers.ExtendS:
		movsxd.opFromReg(&m.Text, 0, reg, reg)
		return values.TempRegOperand(resultType, reg, false)

	case opers.ExtendU:
		if !zeroExt {
			mov.opFromReg(&m.Text, abi.I32, reg, reg)
		}
		return values.TempRegOperand(resultType, reg, false)

	case opers.Mote:
		cvts2sSSE.opFromReg(&m.Text, source.Type, reg, reg)
		return values.TempRegOperand(resultType, reg, false)

	case opers.TruncS:
		cvttsSSE2si.opReg(&m.Text, source.Type, resultType, RegResult, reg)
		code.FreeReg(source.Type, reg)
		return values.TempRegOperand(resultType, RegResult, true)

	case opers.TruncU:
		if resultType == abi.I32 {
			cvttsSSE2si.opReg(&m.Text, source.Type, abi.I64, RegResult, reg)
		} else {
			opTruncFloatToUnsignedI64(m, code, source.Type, reg)
		}
		code.FreeReg(source.Type, reg)
		return values.TempRegOperand(resultType, RegResult, false)

	case opers.ConvertS:
		cvtsi2sSSE.opReg(&m.Text, resultType, source.Type, RegResult, reg)
		code.FreeReg(source.Type, reg)
		return values.TempRegOperand(resultType, RegResult, false)

	case opers.ConvertU:
		if source.Type == abi.I32 {
			if !zeroExt {
				mov.opFromReg(&m.Text, abi.I32, reg, reg)
			}
			cvtsi2sSSE.opReg(&m.Text, resultType, abi.I64, RegResult, reg)
		} else {
			opConvertUnsignedI64ToFloat(m, code, resultType, reg)
		}
		code.FreeReg(source.Type, reg)
		return values.TempRegOperand(resultType, RegResult, false)

	case opers.Reinterpret:
		if source.Type.Category() == abi.Int {
			movSSE.opFromReg(&m.Text, source.Type, RegResult, reg)
		} else {
			movSSE.opToReg(&m.Text, source.Type, RegResult, reg)
		}
		code.FreeReg(source.Type, reg)
		return values.TempRegOperand(resultType, RegResult, true)
	}

	panic("unknown conversion op")
}

func opTruncFloatToUnsignedI64(m *Module, code gen.Coder, sourceType abi.Type, inputReg regs.R) {
	// this algorithm is copied from code generated by gcc and clang:

	roDataAddr := m.RODataAddr
	truncMaskAddr := gen.MaskAddr(roDataAddr, gen.MaskTruncBase, sourceType)

	movapSSE.opFromReg(&m.Text, sourceType, RegScratch, inputReg)
	subsSSE.opFromAddr(&m.Text, sourceType, RegScratch, 0, NoIndex, truncMaskAddr)
	cvttsSSE2si.opReg(&m.Text, sourceType, abi.I64, RegResult, RegScratch)
	mov.opFromAddr(&m.Text, abi.I64, RegScratch, 0, NoIndex, roDataAddr+gen.ROMask80Addr64)
	xor.opFromReg(&m.Text, abi.I64, RegScratch, RegResult)
	cvttsSSE2si.opReg(&m.Text, sourceType, abi.I64, RegResult, inputReg)
	ucomisSSE.opFromAddr(&m.Text, sourceType, inputReg, 0, NoIndex, truncMaskAddr)
	cmovae.opFromReg(&m.Text, abi.I64, RegResult, RegScratch)
}

func opConvertUnsignedI64ToFloat(m *Module, code gen.Coder, resultType abi.Type, inputReg regs.R) {
	// this algorithm is copied from code generated by gcc and clang:

	var done links.L
	var huge links.L

	// TODO: allocate target reg

	test.opFromReg(&m.Text, abi.I64, inputReg, inputReg)
	js.rel8.opStub(&m.Text)
	huge.AddSite(m.Text.Pos())

	// max. 63-bit value
	cvtsi2sSSE.opReg(&m.Text, resultType, abi.I64, RegResult, inputReg)

	jmpRel.rel8.opStub(&m.Text)
	done.AddSite(m.Text.Pos())

	huge.Addr = m.Text.Pos()
	updateLocalBranches(m, &huge)

	// 64-bit value
	mov.opFromReg(&m.Text, abi.I64, RegScratch, inputReg)
	and.opImm(&m.Text, abi.I64, RegScratch, 1)
	shrImm.op(&m.Text, abi.I64, inputReg, 1)
	or.opFromReg(&m.Text, abi.I64, inputReg, RegScratch)
	cvtsi2sSSE.opReg(&m.Text, resultType, abi.I64, RegResult, inputReg)
	addsSSE.opFromReg(&m.Text, resultType, RegResult, RegResult)

	done.Addr = m.Text.Pos()
	updateLocalBranches(m, &done)
}
