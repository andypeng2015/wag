// Generated by internal/cmd/opcodes/generate.go

package codegen

import (
	"github.com/tsavola/wag/abi"
	"github.com/tsavola/wag/internal/loader"
	"github.com/tsavola/wag/internal/opers"
)

const (
	OpcodeUnreachable       = Opcode(0x00)
	OpcodeNop               = Opcode(0x01)
	OpcodeBlock             = Opcode(0x02)
	OpcodeLoop              = Opcode(0x03)
	OpcodeIf                = Opcode(0x04)
	OpcodeElse              = Opcode(0x05)
	OpcodeEnd               = Opcode(0x0b)
	OpcodeBr                = Opcode(0x0c)
	OpcodeBrIf              = Opcode(0x0d)
	OpcodeBrTable           = Opcode(0x0e)
	OpcodeReturn            = Opcode(0x0f)
	OpcodeCall              = Opcode(0x10)
	OpcodeCallIndirect      = Opcode(0x11)
	OpcodeDrop              = Opcode(0x1a)
	OpcodeSelect            = Opcode(0x1b)
	OpcodeGetLocal          = Opcode(0x20)
	OpcodeSetLocal          = Opcode(0x21)
	OpcodeTeeLocal          = Opcode(0x22)
	OpcodeGetGlobal         = Opcode(0x23)
	OpcodeSetGlobal         = Opcode(0x24)
	OpcodeI32Load           = Opcode(0x28)
	OpcodeI64Load           = Opcode(0x29)
	OpcodeF32Load           = Opcode(0x2a)
	OpcodeF64Load           = Opcode(0x2b)
	OpcodeI32Load8S         = Opcode(0x2c)
	OpcodeI32Load8U         = Opcode(0x2d)
	OpcodeI32Load16S        = Opcode(0x2e)
	OpcodeI32Load16U        = Opcode(0x2f)
	OpcodeI64Load8S         = Opcode(0x30)
	OpcodeI64Load8U         = Opcode(0x31)
	OpcodeI64Load16S        = Opcode(0x32)
	OpcodeI64Load16U        = Opcode(0x33)
	OpcodeI64Load32S        = Opcode(0x34)
	OpcodeI64Load32U        = Opcode(0x35)
	OpcodeI32Store          = Opcode(0x36)
	OpcodeI64Store          = Opcode(0x37)
	OpcodeF32Store          = Opcode(0x38)
	OpcodeF64Store          = Opcode(0x39)
	OpcodeI32Store8         = Opcode(0x3a)
	OpcodeI32Store16        = Opcode(0x3b)
	OpcodeI64Store8         = Opcode(0x3c)
	OpcodeI64Store16        = Opcode(0x3d)
	OpcodeI64Store32        = Opcode(0x3e)
	OpcodeCurrentMemory     = Opcode(0x3f)
	OpcodeGrowMemory        = Opcode(0x40)
	OpcodeI32Const          = Opcode(0x41)
	OpcodeI64Const          = Opcode(0x42)
	OpcodeF32Const          = Opcode(0x43)
	OpcodeF64Const          = Opcode(0x44)
	OpcodeI32Eqz            = Opcode(0x45)
	OpcodeI32Eq             = Opcode(0x46)
	OpcodeI32Ne             = Opcode(0x47)
	OpcodeI32LtS            = Opcode(0x48)
	OpcodeI32LtU            = Opcode(0x49)
	OpcodeI32GtS            = Opcode(0x4a)
	OpcodeI32GtU            = Opcode(0x4b)
	OpcodeI32LeS            = Opcode(0x4c)
	OpcodeI32LeU            = Opcode(0x4d)
	OpcodeI32GeS            = Opcode(0x4e)
	OpcodeI32GeU            = Opcode(0x4f)
	OpcodeI64Eqz            = Opcode(0x50)
	OpcodeI64Eq             = Opcode(0x51)
	OpcodeI64Ne             = Opcode(0x52)
	OpcodeI64LtS            = Opcode(0x53)
	OpcodeI64LtU            = Opcode(0x54)
	OpcodeI64GtS            = Opcode(0x55)
	OpcodeI64GtU            = Opcode(0x56)
	OpcodeI64LeS            = Opcode(0x57)
	OpcodeI64LeU            = Opcode(0x58)
	OpcodeI64GeS            = Opcode(0x59)
	OpcodeI64GeU            = Opcode(0x5a)
	OpcodeF32Eq             = Opcode(0x5b)
	OpcodeF32Ne             = Opcode(0x5c)
	OpcodeF32Lt             = Opcode(0x5d)
	OpcodeF32Gt             = Opcode(0x5e)
	OpcodeF32Le             = Opcode(0x5f)
	OpcodeF32Ge             = Opcode(0x60)
	OpcodeF64Eq             = Opcode(0x61)
	OpcodeF64Ne             = Opcode(0x62)
	OpcodeF64Lt             = Opcode(0x63)
	OpcodeF64Gt             = Opcode(0x64)
	OpcodeF64Le             = Opcode(0x65)
	OpcodeF64Ge             = Opcode(0x66)
	OpcodeI32Clz            = Opcode(0x67)
	OpcodeI32Ctz            = Opcode(0x68)
	OpcodeI32Popcnt         = Opcode(0x69)
	OpcodeI32Add            = Opcode(0x6a)
	OpcodeI32Sub            = Opcode(0x6b)
	OpcodeI32Mul            = Opcode(0x6c)
	OpcodeI32DivS           = Opcode(0x6d)
	OpcodeI32DivU           = Opcode(0x6e)
	OpcodeI32RemS           = Opcode(0x6f)
	OpcodeI32RemU           = Opcode(0x70)
	OpcodeI32And            = Opcode(0x71)
	OpcodeI32Or             = Opcode(0x72)
	OpcodeI32Xor            = Opcode(0x73)
	OpcodeI32Shl            = Opcode(0x74)
	OpcodeI32ShrS           = Opcode(0x75)
	OpcodeI32ShrU           = Opcode(0x76)
	OpcodeI32Rotl           = Opcode(0x77)
	OpcodeI32Rotr           = Opcode(0x78)
	OpcodeI64Clz            = Opcode(0x79)
	OpcodeI64Ctz            = Opcode(0x7a)
	OpcodeI64Popcnt         = Opcode(0x7b)
	OpcodeI64Add            = Opcode(0x7c)
	OpcodeI64Sub            = Opcode(0x7d)
	OpcodeI64Mul            = Opcode(0x7e)
	OpcodeI64DivS           = Opcode(0x7f)
	OpcodeI64DivU           = Opcode(0x80)
	OpcodeI64RemS           = Opcode(0x81)
	OpcodeI64RemU           = Opcode(0x82)
	OpcodeI64And            = Opcode(0x83)
	OpcodeI64Or             = Opcode(0x84)
	OpcodeI64Xor            = Opcode(0x85)
	OpcodeI64Shl            = Opcode(0x86)
	OpcodeI64ShrS           = Opcode(0x87)
	OpcodeI64ShrU           = Opcode(0x88)
	OpcodeI64Rotl           = Opcode(0x89)
	OpcodeI64Rotr           = Opcode(0x8a)
	OpcodeF32Abs            = Opcode(0x8b)
	OpcodeF32Neg            = Opcode(0x8c)
	OpcodeF32Ceil           = Opcode(0x8d)
	OpcodeF32Floor          = Opcode(0x8e)
	OpcodeF32Trunc          = Opcode(0x8f)
	OpcodeF32Nearest        = Opcode(0x90)
	OpcodeF32Sqrt           = Opcode(0x91)
	OpcodeF32Add            = Opcode(0x92)
	OpcodeF32Sub            = Opcode(0x93)
	OpcodeF32Mul            = Opcode(0x94)
	OpcodeF32Div            = Opcode(0x95)
	OpcodeF32Min            = Opcode(0x96)
	OpcodeF32Max            = Opcode(0x97)
	OpcodeF32Copysign       = Opcode(0x98)
	OpcodeF64Abs            = Opcode(0x99)
	OpcodeF64Neg            = Opcode(0x9a)
	OpcodeF64Ceil           = Opcode(0x9b)
	OpcodeF64Floor          = Opcode(0x9c)
	OpcodeF64Trunc          = Opcode(0x9d)
	OpcodeF64Nearest        = Opcode(0x9e)
	OpcodeF64Sqrt           = Opcode(0x9f)
	OpcodeF64Add            = Opcode(0xa0)
	OpcodeF64Sub            = Opcode(0xa1)
	OpcodeF64Mul            = Opcode(0xa2)
	OpcodeF64Div            = Opcode(0xa3)
	OpcodeF64Min            = Opcode(0xa4)
	OpcodeF64Max            = Opcode(0xa5)
	OpcodeF64Copysign       = Opcode(0xa6)
	OpcodeI32WrapI64        = Opcode(0xa7)
	OpcodeI32TruncSF32      = Opcode(0xa8)
	OpcodeI32TruncUF32      = Opcode(0xa9)
	OpcodeI32TruncSF64      = Opcode(0xaa)
	OpcodeI32TruncUF64      = Opcode(0xab)
	OpcodeI64ExtendSI32     = Opcode(0xac)
	OpcodeI64ExtendUI32     = Opcode(0xad)
	OpcodeI64TruncSF32      = Opcode(0xae)
	OpcodeI64TruncUF32      = Opcode(0xaf)
	OpcodeI64TruncSF64      = Opcode(0xb0)
	OpcodeI64TruncUF64      = Opcode(0xb1)
	OpcodeF32ConvertSI32    = Opcode(0xb2)
	OpcodeF32ConvertUI32    = Opcode(0xb3)
	OpcodeF32ConvertSI64    = Opcode(0xb4)
	OpcodeF32ConvertUI64    = Opcode(0xb5)
	OpcodeF32DemoteF64      = Opcode(0xb6)
	OpcodeF64ConvertSI32    = Opcode(0xb7)
	OpcodeF64ConvertUI32    = Opcode(0xb8)
	OpcodeF64ConvertSI64    = Opcode(0xb9)
	OpcodeF64ConvertUI64    = Opcode(0xba)
	OpcodeF64PromoteF32     = Opcode(0xbb)
	OpcodeI32ReinterpretF32 = Opcode(0xbc)
	OpcodeI64ReinterpretF64 = Opcode(0xbd)
	OpcodeF32ReinterpretI32 = Opcode(0xbe)
	OpcodeF64ReinterpretI64 = Opcode(0xbf)
)

var opcodeStrings = [256]string{
	OpcodeUnreachable:       "unreachable",
	OpcodeNop:               "nop",
	OpcodeBlock:             "block",
	OpcodeLoop:              "loop",
	OpcodeIf:                "if",
	OpcodeElse:              "else",
	OpcodeEnd:               "end",
	OpcodeBr:                "br",
	OpcodeBrIf:              "br_if",
	OpcodeBrTable:           "br_table",
	OpcodeReturn:            "return",
	OpcodeCall:              "call",
	OpcodeCallIndirect:      "call_indirect",
	OpcodeDrop:              "drop",
	OpcodeSelect:            "select",
	OpcodeGetLocal:          "get_local",
	OpcodeSetLocal:          "set_local",
	OpcodeTeeLocal:          "tee_local",
	OpcodeGetGlobal:         "get_global",
	OpcodeSetGlobal:         "set_global",
	OpcodeI32Load:           "i32.load",
	OpcodeI64Load:           "i64.load",
	OpcodeF32Load:           "f32.load",
	OpcodeF64Load:           "f64.load",
	OpcodeI32Load8S:         "i32.load8_s",
	OpcodeI32Load8U:         "i32.load8_u",
	OpcodeI32Load16S:        "i32.load16_s",
	OpcodeI32Load16U:        "i32.load16_u",
	OpcodeI64Load8S:         "i64.load8_s",
	OpcodeI64Load8U:         "i64.load8_u",
	OpcodeI64Load16S:        "i64.load16_s",
	OpcodeI64Load16U:        "i64.load16_u",
	OpcodeI64Load32S:        "i64.load32_s",
	OpcodeI64Load32U:        "i64.load32_u",
	OpcodeI32Store:          "i32.store",
	OpcodeI64Store:          "i64.store",
	OpcodeF32Store:          "f32.store",
	OpcodeF64Store:          "f64.store",
	OpcodeI32Store8:         "i32.store8",
	OpcodeI32Store16:        "i32.store16",
	OpcodeI64Store8:         "i64.store8",
	OpcodeI64Store16:        "i64.store16",
	OpcodeI64Store32:        "i64.store32",
	OpcodeCurrentMemory:     "current_memory",
	OpcodeGrowMemory:        "grow_memory",
	OpcodeI32Const:          "i32.const",
	OpcodeI64Const:          "i64.const",
	OpcodeF32Const:          "f32.const",
	OpcodeF64Const:          "f64.const",
	OpcodeI32Eqz:            "i32.eqz",
	OpcodeI32Eq:             "i32.eq",
	OpcodeI32Ne:             "i32.ne",
	OpcodeI32LtS:            "i32.lt_s",
	OpcodeI32LtU:            "i32.lt_u",
	OpcodeI32GtS:            "i32.gt_s",
	OpcodeI32GtU:            "i32.gt_u",
	OpcodeI32LeS:            "i32.le_s",
	OpcodeI32LeU:            "i32.le_u",
	OpcodeI32GeS:            "i32.ge_s",
	OpcodeI32GeU:            "i32.ge_u",
	OpcodeI64Eqz:            "i64.eqz",
	OpcodeI64Eq:             "i64.eq",
	OpcodeI64Ne:             "i64.ne",
	OpcodeI64LtS:            "i64.lt_s",
	OpcodeI64LtU:            "i64.lt_u",
	OpcodeI64GtS:            "i64.gt_s",
	OpcodeI64GtU:            "i64.gt_u",
	OpcodeI64LeS:            "i64.le_s",
	OpcodeI64LeU:            "i64.le_u",
	OpcodeI64GeS:            "i64.ge_s",
	OpcodeI64GeU:            "i64.ge_u",
	OpcodeF32Eq:             "f32.eq",
	OpcodeF32Ne:             "f32.ne",
	OpcodeF32Lt:             "f32.lt",
	OpcodeF32Gt:             "f32.gt",
	OpcodeF32Le:             "f32.le",
	OpcodeF32Ge:             "f32.ge",
	OpcodeF64Eq:             "f64.eq",
	OpcodeF64Ne:             "f64.ne",
	OpcodeF64Lt:             "f64.lt",
	OpcodeF64Gt:             "f64.gt",
	OpcodeF64Le:             "f64.le",
	OpcodeF64Ge:             "f64.ge",
	OpcodeI32Clz:            "i32.clz",
	OpcodeI32Ctz:            "i32.ctz",
	OpcodeI32Popcnt:         "i32.popcnt",
	OpcodeI32Add:            "i32.add",
	OpcodeI32Sub:            "i32.sub",
	OpcodeI32Mul:            "i32.mul",
	OpcodeI32DivS:           "i32.div_s",
	OpcodeI32DivU:           "i32.div_u",
	OpcodeI32RemS:           "i32.rem_s",
	OpcodeI32RemU:           "i32.rem_u",
	OpcodeI32And:            "i32.and",
	OpcodeI32Or:             "i32.or",
	OpcodeI32Xor:            "i32.xor",
	OpcodeI32Shl:            "i32.shl",
	OpcodeI32ShrS:           "i32.shr_s",
	OpcodeI32ShrU:           "i32.shr_u",
	OpcodeI32Rotl:           "i32.rotl",
	OpcodeI32Rotr:           "i32.rotr",
	OpcodeI64Clz:            "i64.clz",
	OpcodeI64Ctz:            "i64.ctz",
	OpcodeI64Popcnt:         "i64.popcnt",
	OpcodeI64Add:            "i64.add",
	OpcodeI64Sub:            "i64.sub",
	OpcodeI64Mul:            "i64.mul",
	OpcodeI64DivS:           "i64.div_s",
	OpcodeI64DivU:           "i64.div_u",
	OpcodeI64RemS:           "i64.rem_s",
	OpcodeI64RemU:           "i64.rem_u",
	OpcodeI64And:            "i64.and",
	OpcodeI64Or:             "i64.or",
	OpcodeI64Xor:            "i64.xor",
	OpcodeI64Shl:            "i64.shl",
	OpcodeI64ShrS:           "i64.shr_s",
	OpcodeI64ShrU:           "i64.shr_u",
	OpcodeI64Rotl:           "i64.rotl",
	OpcodeI64Rotr:           "i64.rotr",
	OpcodeF32Abs:            "f32.abs",
	OpcodeF32Neg:            "f32.neg",
	OpcodeF32Ceil:           "f32.ceil",
	OpcodeF32Floor:          "f32.floor",
	OpcodeF32Trunc:          "f32.trunc",
	OpcodeF32Nearest:        "f32.nearest",
	OpcodeF32Sqrt:           "f32.sqrt",
	OpcodeF32Add:            "f32.add",
	OpcodeF32Sub:            "f32.sub",
	OpcodeF32Mul:            "f32.mul",
	OpcodeF32Div:            "f32.div",
	OpcodeF32Min:            "f32.min",
	OpcodeF32Max:            "f32.max",
	OpcodeF32Copysign:       "f32.copysign",
	OpcodeF64Abs:            "f64.abs",
	OpcodeF64Neg:            "f64.neg",
	OpcodeF64Ceil:           "f64.ceil",
	OpcodeF64Floor:          "f64.floor",
	OpcodeF64Trunc:          "f64.trunc",
	OpcodeF64Nearest:        "f64.nearest",
	OpcodeF64Sqrt:           "f64.sqrt",
	OpcodeF64Add:            "f64.add",
	OpcodeF64Sub:            "f64.sub",
	OpcodeF64Mul:            "f64.mul",
	OpcodeF64Div:            "f64.div",
	OpcodeF64Min:            "f64.min",
	OpcodeF64Max:            "f64.max",
	OpcodeF64Copysign:       "f64.copysign",
	OpcodeI32WrapI64:        "i32.wrap/i64",
	OpcodeI32TruncSF32:      "i32.trunc_s/f32",
	OpcodeI32TruncUF32:      "i32.trunc_u/f32",
	OpcodeI32TruncSF64:      "i32.trunc_s/f64",
	OpcodeI32TruncUF64:      "i32.trunc_u/f64",
	OpcodeI64ExtendSI32:     "i64.extend_s/i32",
	OpcodeI64ExtendUI32:     "i64.extend_u/i32",
	OpcodeI64TruncSF32:      "i64.trunc_s/f32",
	OpcodeI64TruncUF32:      "i64.trunc_u/f32",
	OpcodeI64TruncSF64:      "i64.trunc_s/f64",
	OpcodeI64TruncUF64:      "i64.trunc_u/f64",
	OpcodeF32ConvertSI32:    "f32.convert_s/i32",
	OpcodeF32ConvertUI32:    "f32.convert_u/i32",
	OpcodeF32ConvertSI64:    "f32.convert_s/i64",
	OpcodeF32ConvertUI64:    "f32.convert_u/i64",
	OpcodeF32DemoteF64:      "f32.demote/f64",
	OpcodeF64ConvertSI32:    "f64.convert_s/i32",
	OpcodeF64ConvertUI32:    "f64.convert_u/i32",
	OpcodeF64ConvertSI64:    "f64.convert_s/i64",
	OpcodeF64ConvertUI64:    "f64.convert_u/i64",
	OpcodeF64PromoteF32:     "f64.promote/f32",
	OpcodeI32ReinterpretF32: "i32.reinterpret/f32",
	OpcodeI64ReinterpretF64: "i64.reinterpret/f64",
	OpcodeF32ReinterpretI32: "f32.reinterpret/i32",
	OpcodeF64ReinterpretI64: "f64.reinterpret/i64",
}

var opcodeImpls = [256]opImpl{
	OpcodeUnreachable:       {genUnreachable, 0},
	OpcodeNop:               {genNop, 0},
	OpcodeBlock:             {nil, 0}, // initialized by init()
	OpcodeLoop:              {nil, 0}, // initialized by init()
	OpcodeIf:                {nil, 0}, // initialized by init()
	OpcodeElse:              {badGen, 0},
	0x06:                    {badGen, 0},
	0x07:                    {badGen, 0},
	0x08:                    {badGen, 0},
	0x09:                    {badGen, 0},
	0x0a:                    {badGen, 0},
	OpcodeEnd:               {nil, 0},
	OpcodeBr:                {genBr, 0},
	OpcodeBrIf:              {genBrIf, 0},
	OpcodeBrTable:           {genBrTable, 0},
	OpcodeReturn:            {genReturn, 0},
	OpcodeCall:              {genCall, 0},
	OpcodeCallIndirect:      {genCallIndirect, 0},
	0x12:                    {badGen, 0},
	0x13:                    {badGen, 0},
	0x14:                    {badGen, 0},
	0x15:                    {badGen, 0},
	0x16:                    {badGen, 0},
	0x17:                    {badGen, 0},
	0x18:                    {badGen, 0},
	0x19:                    {badGen, 0},
	OpcodeDrop:              {genDrop, 0},
	OpcodeSelect:            {genSelect, 0},
	0x1c:                    {badGen, 0},
	0x1d:                    {badGen, 0},
	0x1e:                    {badGen, 0},
	0x1f:                    {badGen, 0},
	OpcodeGetLocal:          {genGetLocal, 0},
	OpcodeSetLocal:          {genSetLocal, 0},
	OpcodeTeeLocal:          {genTeeLocal, 0},
	OpcodeGetGlobal:         {genGetGlobal, 0},
	OpcodeSetGlobal:         {genSetGlobal, 0},
	0x25:                    {badGen, 0},
	0x26:                    {badGen, 0},
	0x27:                    {badGen, 0},
	OpcodeI32Load:           {genLoadOp, opInfo(abi.I32) | (opInfo(opers.I32Load) << 16)},
	OpcodeI64Load:           {genLoadOp, opInfo(abi.I64) | (opInfo(opers.I64Load) << 16)},
	OpcodeF32Load:           {genLoadOp, opInfo(abi.F32) | (opInfo(opers.F32Load) << 16)},
	OpcodeF64Load:           {genLoadOp, opInfo(abi.F64) | (opInfo(opers.F64Load) << 16)},
	OpcodeI32Load8S:         {genLoadOp, opInfo(abi.I32) | (opInfo(opers.IntLoad8S) << 16)},
	OpcodeI32Load8U:         {genLoadOp, opInfo(abi.I32) | (opInfo(opers.IntLoad8U) << 16)},
	OpcodeI32Load16S:        {genLoadOp, opInfo(abi.I32) | (opInfo(opers.IntLoad16S) << 16)},
	OpcodeI32Load16U:        {genLoadOp, opInfo(abi.I32) | (opInfo(opers.IntLoad16U) << 16)},
	OpcodeI64Load8S:         {genLoadOp, opInfo(abi.I64) | (opInfo(opers.IntLoad8S) << 16)},
	OpcodeI64Load8U:         {genLoadOp, opInfo(abi.I64) | (opInfo(opers.IntLoad8U) << 16)},
	OpcodeI64Load16S:        {genLoadOp, opInfo(abi.I64) | (opInfo(opers.IntLoad16S) << 16)},
	OpcodeI64Load16U:        {genLoadOp, opInfo(abi.I64) | (opInfo(opers.IntLoad16U) << 16)},
	OpcodeI64Load32S:        {genLoadOp, opInfo(abi.I64) | (opInfo(opers.IntLoad32S) << 16)},
	OpcodeI64Load32U:        {genLoadOp, opInfo(abi.I64) | (opInfo(opers.IntLoad32U) << 16)},
	OpcodeI32Store:          {genStoreOp, opInfo(abi.I32) | (opInfo(opers.I32Store) << 16)},
	OpcodeI64Store:          {genStoreOp, opInfo(abi.I64) | (opInfo(opers.I64Store) << 16)},
	OpcodeF32Store:          {genStoreOp, opInfo(abi.F32) | (opInfo(opers.F32Store) << 16)},
	OpcodeF64Store:          {genStoreOp, opInfo(abi.F64) | (opInfo(opers.F64Store) << 16)},
	OpcodeI32Store8:         {genStoreOp, opInfo(abi.I32) | (opInfo(opers.IntStore8) << 16)},
	OpcodeI32Store16:        {genStoreOp, opInfo(abi.I32) | (opInfo(opers.IntStore16) << 16)},
	OpcodeI64Store8:         {genStoreOp, opInfo(abi.I64) | (opInfo(opers.IntStore8) << 16)},
	OpcodeI64Store16:        {genStoreOp, opInfo(abi.I64) | (opInfo(opers.IntStore16) << 16)},
	OpcodeI64Store32:        {genStoreOp, opInfo(abi.I64) | (opInfo(opers.IntStore32) << 16)},
	OpcodeCurrentMemory:     {genCurrentMemory, 0},
	OpcodeGrowMemory:        {genGrowMemory, 0},
	OpcodeI32Const:          {genConstI32, opInfo(abi.I32)},
	OpcodeI64Const:          {genConstI64, opInfo(abi.I64)},
	OpcodeF32Const:          {genConstF32, opInfo(abi.F32)},
	OpcodeF64Const:          {genConstF64, opInfo(abi.F64)},
	OpcodeI32Eqz:            {genUnaryConditionOp, opInfo(abi.I32) | (opInfo(opers.IntEqz) << 16)},
	OpcodeI32Eq:             {genBinaryConditionCommuteOp, opInfo(abi.I32) | (opInfo(opers.IntEq) << 16)},
	OpcodeI32Ne:             {genBinaryConditionCommuteOp, opInfo(abi.I32) | (opInfo(opers.IntNe) << 16)},
	OpcodeI32LtS:            {genBinaryConditionOp, opInfo(abi.I32) | (opInfo(opers.IntLtS) << 16)},
	OpcodeI32LtU:            {genBinaryConditionOp, opInfo(abi.I32) | (opInfo(opers.IntLtU) << 16)},
	OpcodeI32GtS:            {genBinaryConditionOp, opInfo(abi.I32) | (opInfo(opers.IntGtS) << 16)},
	OpcodeI32GtU:            {genBinaryConditionOp, opInfo(abi.I32) | (opInfo(opers.IntGtU) << 16)},
	OpcodeI32LeS:            {genBinaryConditionOp, opInfo(abi.I32) | (opInfo(opers.IntLeS) << 16)},
	OpcodeI32LeU:            {genBinaryConditionOp, opInfo(abi.I32) | (opInfo(opers.IntLeU) << 16)},
	OpcodeI32GeS:            {genBinaryConditionOp, opInfo(abi.I32) | (opInfo(opers.IntGeS) << 16)},
	OpcodeI32GeU:            {genBinaryConditionOp, opInfo(abi.I32) | (opInfo(opers.IntGeU) << 16)},
	OpcodeI64Eqz:            {genUnaryConditionOp, opInfo(abi.I64) | (opInfo(opers.IntEqz) << 16)},
	OpcodeI64Eq:             {genBinaryConditionCommuteOp, opInfo(abi.I64) | (opInfo(opers.IntEq) << 16)},
	OpcodeI64Ne:             {genBinaryConditionCommuteOp, opInfo(abi.I64) | (opInfo(opers.IntNe) << 16)},
	OpcodeI64LtS:            {genBinaryConditionOp, opInfo(abi.I64) | (opInfo(opers.IntLtS) << 16)},
	OpcodeI64LtU:            {genBinaryConditionOp, opInfo(abi.I64) | (opInfo(opers.IntLtU) << 16)},
	OpcodeI64GtS:            {genBinaryConditionOp, opInfo(abi.I64) | (opInfo(opers.IntGtS) << 16)},
	OpcodeI64GtU:            {genBinaryConditionOp, opInfo(abi.I64) | (opInfo(opers.IntGtU) << 16)},
	OpcodeI64LeS:            {genBinaryConditionOp, opInfo(abi.I64) | (opInfo(opers.IntLeS) << 16)},
	OpcodeI64LeU:            {genBinaryConditionOp, opInfo(abi.I64) | (opInfo(opers.IntLeU) << 16)},
	OpcodeI64GeS:            {genBinaryConditionOp, opInfo(abi.I64) | (opInfo(opers.IntGeS) << 16)},
	OpcodeI64GeU:            {genBinaryConditionOp, opInfo(abi.I64) | (opInfo(opers.IntGeU) << 16)},
	OpcodeF32Eq:             {genBinaryConditionCommuteOp, opInfo(abi.F32) | (opInfo(opers.FloatEq) << 16)},
	OpcodeF32Ne:             {genBinaryConditionCommuteOp, opInfo(abi.F32) | (opInfo(opers.FloatNe) << 16)},
	OpcodeF32Lt:             {genBinaryConditionOp, opInfo(abi.F32) | (opInfo(opers.FloatLt) << 16)},
	OpcodeF32Gt:             {genBinaryConditionOp, opInfo(abi.F32) | (opInfo(opers.FloatGt) << 16)},
	OpcodeF32Le:             {genBinaryConditionOp, opInfo(abi.F32) | (opInfo(opers.FloatLe) << 16)},
	OpcodeF32Ge:             {genBinaryConditionOp, opInfo(abi.F32) | (opInfo(opers.FloatGe) << 16)},
	OpcodeF64Eq:             {genBinaryConditionCommuteOp, opInfo(abi.F64) | (opInfo(opers.FloatEq) << 16)},
	OpcodeF64Ne:             {genBinaryConditionCommuteOp, opInfo(abi.F64) | (opInfo(opers.FloatNe) << 16)},
	OpcodeF64Lt:             {genBinaryConditionOp, opInfo(abi.F64) | (opInfo(opers.FloatLt) << 16)},
	OpcodeF64Gt:             {genBinaryConditionOp, opInfo(abi.F64) | (opInfo(opers.FloatGt) << 16)},
	OpcodeF64Le:             {genBinaryConditionOp, opInfo(abi.F64) | (opInfo(opers.FloatLe) << 16)},
	OpcodeF64Ge:             {genBinaryConditionOp, opInfo(abi.F64) | (opInfo(opers.FloatGe) << 16)},
	OpcodeI32Clz:            {genUnaryOp, opInfo(abi.I32) | (opInfo(opers.IntClz) << 16)},
	OpcodeI32Ctz:            {genUnaryOp, opInfo(abi.I32) | (opInfo(opers.IntCtz) << 16)},
	OpcodeI32Popcnt:         {genUnaryOp, opInfo(abi.I32) | (opInfo(opers.IntPopcnt) << 16)},
	OpcodeI32Add:            {genBinaryCommuteOp, opInfo(abi.I32) | (opInfo(opers.IntAdd) << 16)},
	OpcodeI32Sub:            {genBinaryOp, opInfo(abi.I32) | (opInfo(opers.IntSub) << 16)},
	OpcodeI32Mul:            {genBinaryCommuteOp, opInfo(abi.I32) | (opInfo(opers.IntMul) << 16)},
	OpcodeI32DivS:           {genBinaryOp, opInfo(abi.I32) | (opInfo(opers.IntDivS) << 16)},
	OpcodeI32DivU:           {genBinaryOp, opInfo(abi.I32) | (opInfo(opers.IntDivU) << 16)},
	OpcodeI32RemS:           {genBinaryOp, opInfo(abi.I32) | (opInfo(opers.IntRemS) << 16)},
	OpcodeI32RemU:           {genBinaryOp, opInfo(abi.I32) | (opInfo(opers.IntRemU) << 16)},
	OpcodeI32And:            {genBinaryCommuteOp, opInfo(abi.I32) | (opInfo(opers.IntAnd) << 16)},
	OpcodeI32Or:             {genBinaryCommuteOp, opInfo(abi.I32) | (opInfo(opers.IntOr) << 16)},
	OpcodeI32Xor:            {genBinaryCommuteOp, opInfo(abi.I32) | (opInfo(opers.IntXor) << 16)},
	OpcodeI32Shl:            {genBinaryOp, opInfo(abi.I32) | (opInfo(opers.IntShl) << 16)},
	OpcodeI32ShrS:           {genBinaryOp, opInfo(abi.I32) | (opInfo(opers.IntShrS) << 16)},
	OpcodeI32ShrU:           {genBinaryOp, opInfo(abi.I32) | (opInfo(opers.IntShrU) << 16)},
	OpcodeI32Rotl:           {genBinaryOp, opInfo(abi.I32) | (opInfo(opers.IntRotl) << 16)},
	OpcodeI32Rotr:           {genBinaryOp, opInfo(abi.I32) | (opInfo(opers.IntRotr) << 16)},
	OpcodeI64Clz:            {genUnaryOp, opInfo(abi.I64) | (opInfo(opers.IntClz) << 16)},
	OpcodeI64Ctz:            {genUnaryOp, opInfo(abi.I64) | (opInfo(opers.IntCtz) << 16)},
	OpcodeI64Popcnt:         {genUnaryOp, opInfo(abi.I64) | (opInfo(opers.IntPopcnt) << 16)},
	OpcodeI64Add:            {genBinaryCommuteOp, opInfo(abi.I64) | (opInfo(opers.IntAdd) << 16)},
	OpcodeI64Sub:            {genBinaryOp, opInfo(abi.I64) | (opInfo(opers.IntSub) << 16)},
	OpcodeI64Mul:            {genBinaryCommuteOp, opInfo(abi.I64) | (opInfo(opers.IntMul) << 16)},
	OpcodeI64DivS:           {genBinaryOp, opInfo(abi.I64) | (opInfo(opers.IntDivS) << 16)},
	OpcodeI64DivU:           {genBinaryOp, opInfo(abi.I64) | (opInfo(opers.IntDivU) << 16)},
	OpcodeI64RemS:           {genBinaryOp, opInfo(abi.I64) | (opInfo(opers.IntRemS) << 16)},
	OpcodeI64RemU:           {genBinaryOp, opInfo(abi.I64) | (opInfo(opers.IntRemU) << 16)},
	OpcodeI64And:            {genBinaryCommuteOp, opInfo(abi.I64) | (opInfo(opers.IntAnd) << 16)},
	OpcodeI64Or:             {genBinaryCommuteOp, opInfo(abi.I64) | (opInfo(opers.IntOr) << 16)},
	OpcodeI64Xor:            {genBinaryCommuteOp, opInfo(abi.I64) | (opInfo(opers.IntXor) << 16)},
	OpcodeI64Shl:            {genBinaryOp, opInfo(abi.I64) | (opInfo(opers.IntShl) << 16)},
	OpcodeI64ShrS:           {genBinaryOp, opInfo(abi.I64) | (opInfo(opers.IntShrS) << 16)},
	OpcodeI64ShrU:           {genBinaryOp, opInfo(abi.I64) | (opInfo(opers.IntShrU) << 16)},
	OpcodeI64Rotl:           {genBinaryOp, opInfo(abi.I64) | (opInfo(opers.IntRotl) << 16)},
	OpcodeI64Rotr:           {genBinaryOp, opInfo(abi.I64) | (opInfo(opers.IntRotr) << 16)},
	OpcodeF32Abs:            {genUnaryOp, opInfo(abi.F32) | (opInfo(opers.FloatAbs) << 16)},
	OpcodeF32Neg:            {genUnaryOp, opInfo(abi.F32) | (opInfo(opers.FloatNeg) << 16)},
	OpcodeF32Ceil:           {genUnaryOp, opInfo(abi.F32) | (opInfo(opers.FloatCeil) << 16)},
	OpcodeF32Floor:          {genUnaryOp, opInfo(abi.F32) | (opInfo(opers.FloatFloor) << 16)},
	OpcodeF32Trunc:          {genUnaryOp, opInfo(abi.F32) | (opInfo(opers.FloatTrunc) << 16)},
	OpcodeF32Nearest:        {genUnaryOp, opInfo(abi.F32) | (opInfo(opers.FloatNearest) << 16)},
	OpcodeF32Sqrt:           {genUnaryOp, opInfo(abi.F32) | (opInfo(opers.FloatSqrt) << 16)},
	OpcodeF32Add:            {genBinaryCommuteOp, opInfo(abi.F32) | (opInfo(opers.FloatAdd) << 16)},
	OpcodeF32Sub:            {genBinaryOp, opInfo(abi.F32) | (opInfo(opers.FloatSub) << 16)},
	OpcodeF32Mul:            {genBinaryCommuteOp, opInfo(abi.F32) | (opInfo(opers.FloatMul) << 16)},
	OpcodeF32Div:            {genBinaryOp, opInfo(abi.F32) | (opInfo(opers.FloatDiv) << 16)},
	OpcodeF32Min:            {genBinaryCommuteOp, opInfo(abi.F32) | (opInfo(opers.FloatMin) << 16)},
	OpcodeF32Max:            {genBinaryCommuteOp, opInfo(abi.F32) | (opInfo(opers.FloatMax) << 16)},
	OpcodeF32Copysign:       {genBinaryOp, opInfo(abi.F32) | (opInfo(opers.FloatCopysign) << 16)},
	OpcodeF64Abs:            {genUnaryOp, opInfo(abi.F64) | (opInfo(opers.FloatAbs) << 16)},
	OpcodeF64Neg:            {genUnaryOp, opInfo(abi.F64) | (opInfo(opers.FloatNeg) << 16)},
	OpcodeF64Ceil:           {genUnaryOp, opInfo(abi.F64) | (opInfo(opers.FloatCeil) << 16)},
	OpcodeF64Floor:          {genUnaryOp, opInfo(abi.F64) | (opInfo(opers.FloatFloor) << 16)},
	OpcodeF64Trunc:          {genUnaryOp, opInfo(abi.F64) | (opInfo(opers.FloatTrunc) << 16)},
	OpcodeF64Nearest:        {genUnaryOp, opInfo(abi.F64) | (opInfo(opers.FloatNearest) << 16)},
	OpcodeF64Sqrt:           {genUnaryOp, opInfo(abi.F64) | (opInfo(opers.FloatSqrt) << 16)},
	OpcodeF64Add:            {genBinaryCommuteOp, opInfo(abi.F64) | (opInfo(opers.FloatAdd) << 16)},
	OpcodeF64Sub:            {genBinaryOp, opInfo(abi.F64) | (opInfo(opers.FloatSub) << 16)},
	OpcodeF64Mul:            {genBinaryCommuteOp, opInfo(abi.F64) | (opInfo(opers.FloatMul) << 16)},
	OpcodeF64Div:            {genBinaryOp, opInfo(abi.F64) | (opInfo(opers.FloatDiv) << 16)},
	OpcodeF64Min:            {genBinaryCommuteOp, opInfo(abi.F64) | (opInfo(opers.FloatMin) << 16)},
	OpcodeF64Max:            {genBinaryCommuteOp, opInfo(abi.F64) | (opInfo(opers.FloatMax) << 16)},
	OpcodeF64Copysign:       {genBinaryOp, opInfo(abi.F64) | (opInfo(opers.FloatCopysign) << 16)},
	OpcodeI32WrapI64:        {genConversionOp, opInfo(abi.I32) | (opInfo(abi.I64) << 8) | (opInfo(opers.Wrap) << 16)},
	OpcodeI32TruncSF32:      {genConversionOp, opInfo(abi.I32) | (opInfo(abi.F32) << 8) | (opInfo(opers.TruncS) << 16)},
	OpcodeI32TruncUF32:      {genConversionOp, opInfo(abi.I32) | (opInfo(abi.F32) << 8) | (opInfo(opers.TruncU) << 16)},
	OpcodeI32TruncSF64:      {genConversionOp, opInfo(abi.I32) | (opInfo(abi.F64) << 8) | (opInfo(opers.TruncS) << 16)},
	OpcodeI32TruncUF64:      {genConversionOp, opInfo(abi.I32) | (opInfo(abi.F64) << 8) | (opInfo(opers.TruncU) << 16)},
	OpcodeI64ExtendSI32:     {genConversionOp, opInfo(abi.I64) | (opInfo(abi.I32) << 8) | (opInfo(opers.ExtendS) << 16)},
	OpcodeI64ExtendUI32:     {genConversionOp, opInfo(abi.I64) | (opInfo(abi.I32) << 8) | (opInfo(opers.ExtendU) << 16)},
	OpcodeI64TruncSF32:      {genConversionOp, opInfo(abi.I64) | (opInfo(abi.F32) << 8) | (opInfo(opers.TruncS) << 16)},
	OpcodeI64TruncUF32:      {genConversionOp, opInfo(abi.I64) | (opInfo(abi.F32) << 8) | (opInfo(opers.TruncU) << 16)},
	OpcodeI64TruncSF64:      {genConversionOp, opInfo(abi.I64) | (opInfo(abi.F64) << 8) | (opInfo(opers.TruncS) << 16)},
	OpcodeI64TruncUF64:      {genConversionOp, opInfo(abi.I64) | (opInfo(abi.F64) << 8) | (opInfo(opers.TruncU) << 16)},
	OpcodeF32ConvertSI32:    {genConversionOp, opInfo(abi.F32) | (opInfo(abi.I32) << 8) | (opInfo(opers.ConvertS) << 16)},
	OpcodeF32ConvertUI32:    {genConversionOp, opInfo(abi.F32) | (opInfo(abi.I32) << 8) | (opInfo(opers.ConvertU) << 16)},
	OpcodeF32ConvertSI64:    {genConversionOp, opInfo(abi.F32) | (opInfo(abi.I64) << 8) | (opInfo(opers.ConvertS) << 16)},
	OpcodeF32ConvertUI64:    {genConversionOp, opInfo(abi.F32) | (opInfo(abi.I64) << 8) | (opInfo(opers.ConvertU) << 16)},
	OpcodeF32DemoteF64:      {genConversionOp, opInfo(abi.F32) | (opInfo(abi.F64) << 8) | (opInfo(opers.Demote) << 16)},
	OpcodeF64ConvertSI32:    {genConversionOp, opInfo(abi.F64) | (opInfo(abi.I32) << 8) | (opInfo(opers.ConvertS) << 16)},
	OpcodeF64ConvertUI32:    {genConversionOp, opInfo(abi.F64) | (opInfo(abi.I32) << 8) | (opInfo(opers.ConvertU) << 16)},
	OpcodeF64ConvertSI64:    {genConversionOp, opInfo(abi.F64) | (opInfo(abi.I64) << 8) | (opInfo(opers.ConvertS) << 16)},
	OpcodeF64ConvertUI64:    {genConversionOp, opInfo(abi.F64) | (opInfo(abi.I64) << 8) | (opInfo(opers.ConvertU) << 16)},
	OpcodeF64PromoteF32:     {genConversionOp, opInfo(abi.F64) | (opInfo(abi.F32) << 8) | (opInfo(opers.Promote) << 16)},
	OpcodeI32ReinterpretF32: {genConversionOp, opInfo(abi.I32) | (opInfo(abi.F32) << 8) | (opInfo(opers.Reinterpret) << 16)},
	OpcodeI64ReinterpretF64: {genConversionOp, opInfo(abi.I64) | (opInfo(abi.F64) << 8) | (opInfo(opers.Reinterpret) << 16)},
	OpcodeF32ReinterpretI32: {genConversionOp, opInfo(abi.F32) | (opInfo(abi.I32) << 8) | (opInfo(opers.Reinterpret) << 16)},
	OpcodeF64ReinterpretI64: {genConversionOp, opInfo(abi.F64) | (opInfo(abi.I64) << 8) | (opInfo(opers.Reinterpret) << 16)},
	0xc0: {badGen, 0},
	0xc1: {badGen, 0},
	0xc2: {badGen, 0},
	0xc3: {badGen, 0},
	0xc4: {badGen, 0},
	0xc5: {badGen, 0},
	0xc6: {badGen, 0},
	0xc7: {badGen, 0},
	0xc8: {badGen, 0},
	0xc9: {badGen, 0},
	0xca: {badGen, 0},
	0xcb: {badGen, 0},
	0xcc: {badGen, 0},
	0xcd: {badGen, 0},
	0xce: {badGen, 0},
	0xcf: {badGen, 0},
	0xd0: {badGen, 0},
	0xd1: {badGen, 0},
	0xd2: {badGen, 0},
	0xd3: {badGen, 0},
	0xd4: {badGen, 0},
	0xd5: {badGen, 0},
	0xd6: {badGen, 0},
	0xd7: {badGen, 0},
	0xd8: {badGen, 0},
	0xd9: {badGen, 0},
	0xda: {badGen, 0},
	0xdb: {badGen, 0},
	0xdc: {badGen, 0},
	0xdd: {badGen, 0},
	0xde: {badGen, 0},
	0xdf: {badGen, 0},
	0xe0: {badGen, 0},
	0xe1: {badGen, 0},
	0xe2: {badGen, 0},
	0xe3: {badGen, 0},
	0xe4: {badGen, 0},
	0xe5: {badGen, 0},
	0xe6: {badGen, 0},
	0xe7: {badGen, 0},
	0xe8: {badGen, 0},
	0xe9: {badGen, 0},
	0xea: {badGen, 0},
	0xeb: {badGen, 0},
	0xec: {badGen, 0},
	0xed: {badGen, 0},
	0xee: {badGen, 0},
	0xef: {badGen, 0},
	0xf0: {badGen, 0},
	0xf1: {badGen, 0},
	0xf2: {badGen, 0},
	0xf3: {badGen, 0},
	0xf4: {badGen, 0},
	0xf5: {badGen, 0},
	0xf6: {badGen, 0},
	0xf7: {badGen, 0},
	0xf8: {badGen, 0},
	0xf9: {badGen, 0},
	0xfa: {badGen, 0},
	0xfb: {badGen, 0},
	0xfc: {badGen, 0},
	0xfd: {badGen, 0},
	0xfe: {badGen, 0},
	0xff: {badGen, 0},
}

var opcodeSkips = [256]func(loader.L, Opcode){
	OpcodeUnreachable:       skipNothing,
	OpcodeNop:               skipNothing,
	OpcodeBlock:             nil, // initialized by init()
	OpcodeLoop:              nil, // initialized by init()
	OpcodeIf:                nil, // initialized by init()
	OpcodeElse:              badSkip,
	0x06:                    badSkip,
	0x07:                    badSkip,
	0x08:                    badSkip,
	0x09:                    badSkip,
	0x0a:                    badSkip,
	OpcodeEnd:               nil,
	OpcodeBr:                skipVaruint32,
	OpcodeBrIf:              skipVaruint32,
	OpcodeBrTable:           skipBrTable,
	OpcodeReturn:            skipNothing,
	OpcodeCall:              skipVaruint32,
	OpcodeCallIndirect:      skipCallIndirect,
	0x12:                    badSkip,
	0x13:                    badSkip,
	0x14:                    badSkip,
	0x15:                    badSkip,
	0x16:                    badSkip,
	0x17:                    badSkip,
	0x18:                    badSkip,
	0x19:                    badSkip,
	OpcodeDrop:              skipNothing,
	OpcodeSelect:            skipNothing,
	0x1c:                    badSkip,
	0x1d:                    badSkip,
	0x1e:                    badSkip,
	0x1f:                    badSkip,
	OpcodeGetLocal:          skipVaruint32,
	OpcodeSetLocal:          skipVaruint32,
	OpcodeTeeLocal:          skipVaruint32,
	OpcodeGetGlobal:         skipVaruint32,
	OpcodeSetGlobal:         skipVaruint32,
	0x25:                    badSkip,
	0x26:                    badSkip,
	0x27:                    badSkip,
	OpcodeI32Load:           skipMemoryImmediate,
	OpcodeI64Load:           skipMemoryImmediate,
	OpcodeF32Load:           skipMemoryImmediate,
	OpcodeF64Load:           skipMemoryImmediate,
	OpcodeI32Load8S:         skipMemoryImmediate,
	OpcodeI32Load8U:         skipMemoryImmediate,
	OpcodeI32Load16S:        skipMemoryImmediate,
	OpcodeI32Load16U:        skipMemoryImmediate,
	OpcodeI64Load8S:         skipMemoryImmediate,
	OpcodeI64Load8U:         skipMemoryImmediate,
	OpcodeI64Load16S:        skipMemoryImmediate,
	OpcodeI64Load16U:        skipMemoryImmediate,
	OpcodeI64Load32S:        skipMemoryImmediate,
	OpcodeI64Load32U:        skipMemoryImmediate,
	OpcodeI32Store:          skipMemoryImmediate,
	OpcodeI64Store:          skipMemoryImmediate,
	OpcodeF32Store:          skipMemoryImmediate,
	OpcodeF64Store:          skipMemoryImmediate,
	OpcodeI32Store8:         skipMemoryImmediate,
	OpcodeI32Store16:        skipMemoryImmediate,
	OpcodeI64Store8:         skipMemoryImmediate,
	OpcodeI64Store16:        skipMemoryImmediate,
	OpcodeI64Store32:        skipMemoryImmediate,
	OpcodeCurrentMemory:     skipVaruint1,
	OpcodeGrowMemory:        skipVaruint1,
	OpcodeI32Const:          skipVarint32,
	OpcodeI64Const:          skipVarint64,
	OpcodeF32Const:          skipUint32,
	OpcodeF64Const:          skipUint64,
	OpcodeI32Eqz:            skipNothing,
	OpcodeI32Eq:             skipNothing,
	OpcodeI32Ne:             skipNothing,
	OpcodeI32LtS:            skipNothing,
	OpcodeI32LtU:            skipNothing,
	OpcodeI32GtS:            skipNothing,
	OpcodeI32GtU:            skipNothing,
	OpcodeI32LeS:            skipNothing,
	OpcodeI32LeU:            skipNothing,
	OpcodeI32GeS:            skipNothing,
	OpcodeI32GeU:            skipNothing,
	OpcodeI64Eqz:            skipNothing,
	OpcodeI64Eq:             skipNothing,
	OpcodeI64Ne:             skipNothing,
	OpcodeI64LtS:            skipNothing,
	OpcodeI64LtU:            skipNothing,
	OpcodeI64GtS:            skipNothing,
	OpcodeI64GtU:            skipNothing,
	OpcodeI64LeS:            skipNothing,
	OpcodeI64LeU:            skipNothing,
	OpcodeI64GeS:            skipNothing,
	OpcodeI64GeU:            skipNothing,
	OpcodeF32Eq:             skipNothing,
	OpcodeF32Ne:             skipNothing,
	OpcodeF32Lt:             skipNothing,
	OpcodeF32Gt:             skipNothing,
	OpcodeF32Le:             skipNothing,
	OpcodeF32Ge:             skipNothing,
	OpcodeF64Eq:             skipNothing,
	OpcodeF64Ne:             skipNothing,
	OpcodeF64Lt:             skipNothing,
	OpcodeF64Gt:             skipNothing,
	OpcodeF64Le:             skipNothing,
	OpcodeF64Ge:             skipNothing,
	OpcodeI32Clz:            skipNothing,
	OpcodeI32Ctz:            skipNothing,
	OpcodeI32Popcnt:         skipNothing,
	OpcodeI32Add:            skipNothing,
	OpcodeI32Sub:            skipNothing,
	OpcodeI32Mul:            skipNothing,
	OpcodeI32DivS:           skipNothing,
	OpcodeI32DivU:           skipNothing,
	OpcodeI32RemS:           skipNothing,
	OpcodeI32RemU:           skipNothing,
	OpcodeI32And:            skipNothing,
	OpcodeI32Or:             skipNothing,
	OpcodeI32Xor:            skipNothing,
	OpcodeI32Shl:            skipNothing,
	OpcodeI32ShrS:           skipNothing,
	OpcodeI32ShrU:           skipNothing,
	OpcodeI32Rotl:           skipNothing,
	OpcodeI32Rotr:           skipNothing,
	OpcodeI64Clz:            skipNothing,
	OpcodeI64Ctz:            skipNothing,
	OpcodeI64Popcnt:         skipNothing,
	OpcodeI64Add:            skipNothing,
	OpcodeI64Sub:            skipNothing,
	OpcodeI64Mul:            skipNothing,
	OpcodeI64DivS:           skipNothing,
	OpcodeI64DivU:           skipNothing,
	OpcodeI64RemS:           skipNothing,
	OpcodeI64RemU:           skipNothing,
	OpcodeI64And:            skipNothing,
	OpcodeI64Or:             skipNothing,
	OpcodeI64Xor:            skipNothing,
	OpcodeI64Shl:            skipNothing,
	OpcodeI64ShrS:           skipNothing,
	OpcodeI64ShrU:           skipNothing,
	OpcodeI64Rotl:           skipNothing,
	OpcodeI64Rotr:           skipNothing,
	OpcodeF32Abs:            skipNothing,
	OpcodeF32Neg:            skipNothing,
	OpcodeF32Ceil:           skipNothing,
	OpcodeF32Floor:          skipNothing,
	OpcodeF32Trunc:          skipNothing,
	OpcodeF32Nearest:        skipNothing,
	OpcodeF32Sqrt:           skipNothing,
	OpcodeF32Add:            skipNothing,
	OpcodeF32Sub:            skipNothing,
	OpcodeF32Mul:            skipNothing,
	OpcodeF32Div:            skipNothing,
	OpcodeF32Min:            skipNothing,
	OpcodeF32Max:            skipNothing,
	OpcodeF32Copysign:       skipNothing,
	OpcodeF64Abs:            skipNothing,
	OpcodeF64Neg:            skipNothing,
	OpcodeF64Ceil:           skipNothing,
	OpcodeF64Floor:          skipNothing,
	OpcodeF64Trunc:          skipNothing,
	OpcodeF64Nearest:        skipNothing,
	OpcodeF64Sqrt:           skipNothing,
	OpcodeF64Add:            skipNothing,
	OpcodeF64Sub:            skipNothing,
	OpcodeF64Mul:            skipNothing,
	OpcodeF64Div:            skipNothing,
	OpcodeF64Min:            skipNothing,
	OpcodeF64Max:            skipNothing,
	OpcodeF64Copysign:       skipNothing,
	OpcodeI32WrapI64:        skipNothing,
	OpcodeI32TruncSF32:      skipNothing,
	OpcodeI32TruncUF32:      skipNothing,
	OpcodeI32TruncSF64:      skipNothing,
	OpcodeI32TruncUF64:      skipNothing,
	OpcodeI64ExtendSI32:     skipNothing,
	OpcodeI64ExtendUI32:     skipNothing,
	OpcodeI64TruncSF32:      skipNothing,
	OpcodeI64TruncUF32:      skipNothing,
	OpcodeI64TruncSF64:      skipNothing,
	OpcodeI64TruncUF64:      skipNothing,
	OpcodeF32ConvertSI32:    skipNothing,
	OpcodeF32ConvertUI32:    skipNothing,
	OpcodeF32ConvertSI64:    skipNothing,
	OpcodeF32ConvertUI64:    skipNothing,
	OpcodeF32DemoteF64:      skipNothing,
	OpcodeF64ConvertSI32:    skipNothing,
	OpcodeF64ConvertUI32:    skipNothing,
	OpcodeF64ConvertSI64:    skipNothing,
	OpcodeF64ConvertUI64:    skipNothing,
	OpcodeF64PromoteF32:     skipNothing,
	OpcodeI32ReinterpretF32: skipNothing,
	OpcodeI64ReinterpretF64: skipNothing,
	OpcodeF32ReinterpretI32: skipNothing,
	OpcodeF64ReinterpretI64: skipNothing,
	0xc0: badSkip,
	0xc1: badSkip,
	0xc2: badSkip,
	0xc3: badSkip,
	0xc4: badSkip,
	0xc5: badSkip,
	0xc6: badSkip,
	0xc7: badSkip,
	0xc8: badSkip,
	0xc9: badSkip,
	0xca: badSkip,
	0xcb: badSkip,
	0xcc: badSkip,
	0xcd: badSkip,
	0xce: badSkip,
	0xcf: badSkip,
	0xd0: badSkip,
	0xd1: badSkip,
	0xd2: badSkip,
	0xd3: badSkip,
	0xd4: badSkip,
	0xd5: badSkip,
	0xd6: badSkip,
	0xd7: badSkip,
	0xd8: badSkip,
	0xd9: badSkip,
	0xda: badSkip,
	0xdb: badSkip,
	0xdc: badSkip,
	0xdd: badSkip,
	0xde: badSkip,
	0xdf: badSkip,
	0xe0: badSkip,
	0xe1: badSkip,
	0xe2: badSkip,
	0xe3: badSkip,
	0xe4: badSkip,
	0xe5: badSkip,
	0xe6: badSkip,
	0xe7: badSkip,
	0xe8: badSkip,
	0xe9: badSkip,
	0xea: badSkip,
	0xeb: badSkip,
	0xec: badSkip,
	0xed: badSkip,
	0xee: badSkip,
	0xef: badSkip,
	0xf0: badSkip,
	0xf1: badSkip,
	0xf2: badSkip,
	0xf3: badSkip,
	0xf4: badSkip,
	0xf5: badSkip,
	0xf6: badSkip,
	0xf7: badSkip,
	0xf8: badSkip,
	0xf9: badSkip,
	0xfa: badSkip,
	0xfb: badSkip,
	0xfc: badSkip,
	0xfd: badSkip,
	0xfe: badSkip,
	0xff: badSkip,
}
