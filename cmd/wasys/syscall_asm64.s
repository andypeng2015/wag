// Generated by internal/cmd/syscalls/generate.go

#include "textflag.h"

// func importRead() uint64
TEXT ·importRead(SB),$0-8
	LEAQ	sysRead<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysRead<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$0, AX
	JMP	·callSys(SB)

// func importWrite() uint64
TEXT ·importWrite(SB),$0-8
	LEAQ	sysWrite<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysWrite<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$1, AX
	JMP	·callSys(SB)

// func importOpen() uint64
TEXT ·importOpen(SB),$0-8
	LEAQ	sysOpen<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysOpen<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$2, AX
	JMP	·callSys(SB)

// func importClose() uint64
TEXT ·importClose(SB),$0-8
	LEAQ	sysClose<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysClose<>(SB),NOSPLIT,$0
	MOVL	$3, AX
	JMP	·callSys(SB)

// func importLseek() uint64
TEXT ·importLseek(SB),$0-8
	LEAQ	sysLseek<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysLseek<>(SB),NOSPLIT,$0
	MOVL	$8, AX
	JMP	·callSys(SB)

// func importPread() uint64
TEXT ·importPread(SB),$0-8
	LEAQ	sysPread<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysPread<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$17, AX
	JMP	·callSys(SB)

// func importPwrite() uint64
TEXT ·importPwrite(SB),$0-8
	LEAQ	sysPwrite<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysPwrite<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$18, AX
	JMP	·callSys(SB)

// func importAccess() uint64
TEXT ·importAccess(SB),$0-8
	LEAQ	sysAccess<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysAccess<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$21, AX
	JMP	·callSys(SB)

// func importPipe() uint64
TEXT ·importPipe(SB),$0-8
	LEAQ	sysPipe<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysPipe<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$22, AX
	JMP	·callSys(SB)

// func importDup() uint64
TEXT ·importDup(SB),$0-8
	LEAQ	sysDup<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysDup<>(SB),NOSPLIT,$0
	MOVL	$32, AX
	JMP	·callSys(SB)

// func importDup2() uint64
TEXT ·importDup2(SB),$0-8
	LEAQ	sysDup2<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysDup2<>(SB),NOSPLIT,$0
	MOVL	$33, AX
	JMP	·callSys(SB)

// func importGetpid() uint64
TEXT ·importGetpid(SB),$0-8
	LEAQ	sysGetpid<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysGetpid<>(SB),NOSPLIT,$0
	MOVL	$39, AX
	JMP	·callSys(SB)

// func importSendfile() uint64
TEXT ·importSendfile(SB),$0-8
	LEAQ	sysSendfile<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSendfile<>(SB),NOSPLIT,$0
	ANDL	BP, BP
	JZ	null2
	ADDQ	R14, BP
null2:	MOVL	$40, AX
	JMP	·callSys(SB)

// func importShutdown() uint64
TEXT ·importShutdown(SB),$0-8
	LEAQ	sysShutdown<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysShutdown<>(SB),NOSPLIT,$0
	MOVL	$48, AX
	JMP	·callSys(SB)

// func importSocketpair() uint64
TEXT ·importSocketpair(SB),$0-8
	LEAQ	sysSocketpair<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSocketpair<>(SB),NOSPLIT,$0
	ANDL	SI, SI
	JZ	null3
	ADDQ	R14, SI
null3:	MOVL	$53, AX
	JMP	·callSys(SB)

// func importFlock() uint64
TEXT ·importFlock(SB),$0-8
	LEAQ	sysFlock<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFlock<>(SB),NOSPLIT,$0
	MOVL	$73, AX
	JMP	·callSys(SB)

// func importFsync() uint64
TEXT ·importFsync(SB),$0-8
	LEAQ	sysFsync<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFsync<>(SB),NOSPLIT,$0
	MOVL	$74, AX
	JMP	·callSys(SB)

// func importFdatasync() uint64
TEXT ·importFdatasync(SB),$0-8
	LEAQ	sysFdatasync<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFdatasync<>(SB),NOSPLIT,$0
	MOVL	$75, AX
	JMP	·callSys(SB)

// func importTruncate() uint64
TEXT ·importTruncate(SB),$0-8
	LEAQ	sysTruncate<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysTruncate<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$76, AX
	JMP	·callSys(SB)

// func importFtruncate() uint64
TEXT ·importFtruncate(SB),$0-8
	LEAQ	sysFtruncate<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFtruncate<>(SB),NOSPLIT,$0
	MOVL	$77, AX
	JMP	·callSys(SB)

// func importGetcwd() uint64
TEXT ·importGetcwd(SB),$0-8
	LEAQ	sysGetcwd<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysGetcwd<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$79, AX
	JMP	·callSys(SB)

// func importChdir() uint64
TEXT ·importChdir(SB),$0-8
	LEAQ	sysChdir<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysChdir<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$80, AX
	JMP	·callSys(SB)

// func importFchdir() uint64
TEXT ·importFchdir(SB),$0-8
	LEAQ	sysFchdir<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFchdir<>(SB),NOSPLIT,$0
	MOVL	$81, AX
	JMP	·callSys(SB)

// func importRename() uint64
TEXT ·importRename(SB),$0-8
	LEAQ	sysRename<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysRename<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$82, AX
	JMP	·callSys(SB)

// func importMkdir() uint64
TEXT ·importMkdir(SB),$0-8
	LEAQ	sysMkdir<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysMkdir<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$83, AX
	JMP	·callSys(SB)

// func importRmdir() uint64
TEXT ·importRmdir(SB),$0-8
	LEAQ	sysRmdir<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysRmdir<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$84, AX
	JMP	·callSys(SB)

// func importCreat() uint64
TEXT ·importCreat(SB),$0-8
	LEAQ	sysCreat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysCreat<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$85, AX
	JMP	·callSys(SB)

// func importLink() uint64
TEXT ·importLink(SB),$0-8
	LEAQ	sysLink<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysLink<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$86, AX
	JMP	·callSys(SB)

// func importUnlink() uint64
TEXT ·importUnlink(SB),$0-8
	LEAQ	sysUnlink<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysUnlink<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$87, AX
	JMP	·callSys(SB)

// func importSymlink() uint64
TEXT ·importSymlink(SB),$0-8
	LEAQ	sysSymlink<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSymlink<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$88, AX
	JMP	·callSys(SB)

// func importReadlink() uint64
TEXT ·importReadlink(SB),$0-8
	LEAQ	sysReadlink<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysReadlink<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$89, AX
	JMP	·callSys(SB)

// func importChmod() uint64
TEXT ·importChmod(SB),$0-8
	LEAQ	sysChmod<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysChmod<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$90, AX
	JMP	·callSys(SB)

// func importFchmod() uint64
TEXT ·importFchmod(SB),$0-8
	LEAQ	sysFchmod<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFchmod<>(SB),NOSPLIT,$0
	MOVL	$91, AX
	JMP	·callSys(SB)

// func importChown() uint64
TEXT ·importChown(SB),$0-8
	LEAQ	sysChown<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysChown<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$92, AX
	JMP	·callSys(SB)

// func importFchown() uint64
TEXT ·importFchown(SB),$0-8
	LEAQ	sysFchown<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFchown<>(SB),NOSPLIT,$0
	MOVL	$93, AX
	JMP	·callSys(SB)

// func importLchown() uint64
TEXT ·importLchown(SB),$0-8
	LEAQ	sysLchown<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysLchown<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$94, AX
	JMP	·callSys(SB)

// func importUmask() uint64
TEXT ·importUmask(SB),$0-8
	LEAQ	sysUmask<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysUmask<>(SB),NOSPLIT,$0
	MOVL	$95, AX
	JMP	·callSys(SB)

// func importGetuid() uint64
TEXT ·importGetuid(SB),$0-8
	LEAQ	sysGetuid<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysGetuid<>(SB),NOSPLIT,$0
	MOVL	$102, AX
	JMP	·callSys(SB)

// func importGetgid() uint64
TEXT ·importGetgid(SB),$0-8
	LEAQ	sysGetgid<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysGetgid<>(SB),NOSPLIT,$0
	MOVL	$104, AX
	JMP	·callSys(SB)

// func importVhangup() uint64
TEXT ·importVhangup(SB),$0-8
	LEAQ	sysVhangup<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysVhangup<>(SB),NOSPLIT,$0
	MOVL	$153, AX
	JMP	·callSys(SB)

// func importSync() uint64
TEXT ·importSync(SB),$0-8
	LEAQ	sysSync<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSync<>(SB),NOSPLIT,$0
	MOVL	$162, AX
	JMP	·callSys(SB)

// func importGettid() uint64
TEXT ·importGettid(SB),$0-8
	LEAQ	sysGettid<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysGettid<>(SB),NOSPLIT,$0
	MOVL	$186, AX
	JMP	·callSys(SB)

// func importTime() uint64
TEXT ·importTime(SB),$0-8
	LEAQ	sysTime<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysTime<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$201, AX
	JMP	·callSys(SB)

// func importPosixFadvise() uint64
TEXT ·importPosixFadvise(SB),$0-8
	LEAQ	sysPosixFadvise<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysPosixFadvise<>(SB),NOSPLIT,$0
	MOVL	$221, AX
	JMP	·callSys(SB)

// func importExit() uint64
TEXT ·importExit(SB),$0-8
	LEAQ	sysExit<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysExit<>(SB),NOSPLIT,$0
	MOVL	$231, AX
	JMP	·callSys(SB)

// func importInotifyInit() uint64
TEXT ·importInotifyInit(SB),$0-8
	LEAQ	sysInotifyInit<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysInotifyInit<>(SB),NOSPLIT,$0
	MOVL	$253, AX
	JMP	·callSys(SB)

// func importInotifyAddWatch() uint64
TEXT ·importInotifyAddWatch(SB),$0-8
	LEAQ	sysInotifyAddWatch<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysInotifyAddWatch<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$254, AX
	JMP	·callSys(SB)

// func importInotifyRmWatch() uint64
TEXT ·importInotifyRmWatch(SB),$0-8
	LEAQ	sysInotifyRmWatch<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysInotifyRmWatch<>(SB),NOSPLIT,$0
	MOVL	$255, AX
	JMP	·callSys(SB)

// func importOpenat() uint64
TEXT ·importOpenat(SB),$0-8
	LEAQ	sysOpenat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysOpenat<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$257, AX
	JMP	·callSys(SB)

// func importMkdirat() uint64
TEXT ·importMkdirat(SB),$0-8
	LEAQ	sysMkdirat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysMkdirat<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$258, AX
	JMP	·callSys(SB)

// func importFchownat() uint64
TEXT ·importFchownat(SB),$0-8
	LEAQ	sysFchownat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFchownat<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$260, AX
	JMP	·callSys(SB)

// func importUnlinkat() uint64
TEXT ·importUnlinkat(SB),$0-8
	LEAQ	sysUnlinkat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysUnlinkat<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$263, AX
	JMP	·callSys(SB)

// func importRenameat() uint64
TEXT ·importRenameat(SB),$0-8
	LEAQ	sysRenameat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysRenameat<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	ANDL	SI, SI
	JZ	null3
	ADDQ	R14, SI
null3:	MOVL	$264, AX
	JMP	·callSys(SB)

// func importLinkat() uint64
TEXT ·importLinkat(SB),$0-8
	LEAQ	sysLinkat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysLinkat<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	ANDL	SI, SI
	JZ	null3
	ADDQ	R14, SI
null3:	MOVL	$265, AX
	JMP	·callSys(SB)

// func importSymlinkat() uint64
TEXT ·importSymlinkat(SB),$0-8
	LEAQ	sysSymlinkat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSymlinkat<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	ANDL	BP, BP
	JZ	null2
	ADDQ	R14, BP
null2:	MOVL	$266, AX
	JMP	·callSys(SB)

// func importReadlinkat() uint64
TEXT ·importReadlinkat(SB),$0-8
	LEAQ	sysReadlinkat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysReadlinkat<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	ANDL	BP, BP
	JZ	null2
	ADDQ	R14, BP
null2:	MOVL	$267, AX
	JMP	·callSys(SB)

// func importFchmodat() uint64
TEXT ·importFchmodat(SB),$0-8
	LEAQ	sysFchmodat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFchmodat<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$268, AX
	JMP	·callSys(SB)

// func importFaccessat() uint64
TEXT ·importFaccessat(SB),$0-8
	LEAQ	sysFaccessat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFaccessat<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	MOVL	$269, AX
	JMP	·callSys(SB)

// func importSplice() uint64
TEXT ·importSplice(SB),$0-8
	LEAQ	sysSplice<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSplice<>(SB),NOSPLIT,$0
	ANDL	BX, BX
	JZ	null1
	ADDQ	R14, BX
null1:	ANDL	SI, SI
	JZ	null3
	ADDQ	R14, SI
null3:	MOVL	$275, AX
	JMP	·callSys(SB)

// func importTee() uint64
TEXT ·importTee(SB),$0-8
	LEAQ	sysTee<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysTee<>(SB),NOSPLIT,$0
	MOVL	$276, AX
	JMP	·callSys(SB)

// func importSyncFileRange() uint64
TEXT ·importSyncFileRange(SB),$0-8
	LEAQ	sysSyncFileRange<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSyncFileRange<>(SB),NOSPLIT,$0
	MOVL	$277, AX
	JMP	·callSys(SB)

// func importFallocate() uint64
TEXT ·importFallocate(SB),$0-8
	LEAQ	sysFallocate<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFallocate<>(SB),NOSPLIT,$0
	MOVL	$285, AX
	JMP	·callSys(SB)

// func importEventfd() uint64
TEXT ·importEventfd(SB),$0-8
	LEAQ	sysEventfd<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysEventfd<>(SB),NOSPLIT,$0
	MOVL	$290, AX
	JMP	·callSys(SB)

// func importDup3() uint64
TEXT ·importDup3(SB),$0-8
	LEAQ	sysDup3<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysDup3<>(SB),NOSPLIT,$0
	MOVL	$292, AX
	JMP	·callSys(SB)

// func importPipe2() uint64
TEXT ·importPipe2(SB),$0-8
	LEAQ	sysPipe2<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysPipe2<>(SB),NOSPLIT,$0
	ANDL	CX, CX
	JZ	null0
	ADDQ	R14, CX
null0:	MOVL	$293, AX
	JMP	·callSys(SB)
